DROP TABLE IF EXISTS requests CASCADE;
DROP TABLE IF EXISTS compilations_events CASCADE;
DROP TABLE IF EXISTS events CASCADE;
DROP TABLE IF EXISTS compilations CASCADE;
DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS users CASCADE;

CREATE TABLE IF NOT EXISTS users (
  id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(250) NOT NULL,
  email VARCHAR(254) NOT NULL,
  CONSTRAINT uq_user_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS categories (
  id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  CONSTRAINT uq_category_name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS compilations (
  id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title VARCHAR(50) NOT NULL,
  pinned BOOLEAN NOT NULL,
  CONSTRAINT uq_compilation_title UNIQUE (title)
);

CREATE TABLE IF NOT EXISTS events (
  id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  initiator INTEGER NOT NULL,
  annotation VARCHAR(2000) NOT NULL,
  category INTEGER NOT NULL,
  description VARCHAR(7000) NOT NULL,
  event_date TIMESTAMP NOT NULL,
  lat DOUBLE PRECISION NOT NULL,
  lon DOUBLE PRECISION NOT NULL,
  paid BOOLEAN NOT NULL,
  participant_limit INTEGER NOT NULL,
  request_moderation BOOLEAN NOT NULL,
  title VARCHAR(120) NOT NULL,
  created_on TIMESTAMP NOT NULL,
  state VARCHAR(50) NOT NULL,
  published_on TIMESTAMP,
  CONSTRAINT fk_events_to_users FOREIGN KEY(initiator) REFERENCES users(id),
  CONSTRAINT fk_events_to_categories FOREIGN KEY(category) REFERENCES categories(id)
);

CREATE TABLE IF NOT EXISTS compilations_events (
  id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  compilation INTEGER NOT NULL,
  event INTEGER NOT NULL,
  CONSTRAINT fk_compilations_events_to_compilations FOREIGN KEY(compilation) REFERENCES compilations(id),
  CONSTRAINT fk_compilations_events_to_events FOREIGN KEY(event) REFERENCES events(id)
);

CREATE TABLE IF NOT EXISTS requests (
  id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  event INTEGER NOT NULL,
  requester INTEGER NOT NULL,
  created TIMESTAMP NOT NULL,
  status VARCHAR(50) NOT NULL,
  CONSTRAINT fk_requests_to_users FOREIGN KEY(requester) REFERENCES users(id),
  CONSTRAINT fk_requests_to_events FOREIGN KEY(event) REFERENCES events(id)
);