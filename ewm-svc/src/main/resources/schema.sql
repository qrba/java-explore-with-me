CREATE TABLE IF NOT EXISTS users (
  id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(250) NOT NULL,
  email VARCHAR(254) NOT NULL,
  CONSTRAINT uq_user_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS categories (
  id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  CONSTRAINT uq_category_name UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS compilations (
  id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title VARCHAR(50) NOT NULL,
  pinned BOOLEAN NOT NULL,
  CONSTRAINT uq_compilation_title UNIQUE (title)
);

CREATE TABLE IF NOT EXISTS events (
  id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  initiator_id INTEGER NOT NULL,
  annotation VARCHAR(2000) NOT NULL,
  category_id INTEGER NOT NULL,
  description VARCHAR(7000) NOT NULL,
  event_date TIMESTAMP NOT NULL,
  lat DOUBLE PRECISION NOT NULL,
  lon DOUBLE PRECISION NOT NULL,
  paid BOOLEAN NOT NULL,
  participant_limit INTEGER NOT NULL,
  request_moderation BOOLEAN NOT NULL,
  title VARCHAR(120) NOT NULL,
  created_on TIMESTAMP NOT NULL,
  state VARCHAR(50) NOT NULL,
  published_on TIMESTAMP,
  CONSTRAINT fk_events_to_users FOREIGN KEY(initiator_id) REFERENCES users(id),
  CONSTRAINT fk_events_to_categories FOREIGN KEY(category_id) REFERENCES categories(id)
);

CREATE TABLE IF NOT EXISTS compilations_events (
  id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  compilation_id INTEGER NOT NULL,
  event_id INTEGER NOT NULL,
  CONSTRAINT fk_compilations_events_to_compilations FOREIGN KEY(compilation_id) REFERENCES compilations(id),
  CONSTRAINT fk_compilations_events_to_events FOREIGN KEY(event_id) REFERENCES events(id)
);

CREATE TABLE IF NOT EXISTS requests (
  id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  event_id INTEGER NOT NULL,
  requester_id INTEGER NOT NULL,
  created TIMESTAMP NOT NULL,
  status VARCHAR(50) NOT NULL,
  CONSTRAINT fk_requests_to_users FOREIGN KEY(requester_id) REFERENCES users(id),
  CONSTRAINT fk_requests_to_events FOREIGN KEY(event_id) REFERENCES events(id)
);

CREATE TABLE IF NOT EXISTS locations (
  id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  description VARCHAR(2000) NOT NULL,
  lat DOUBLE PRECISION NOT NULL,
  lon DOUBLE PRECISION NOT NULL,
  radius DOUBLE PRECISION NOT NULL,
  CONSTRAINT uq_location_name UNIQUE (name)
);

CREATE OR REPLACE FUNCTION event_is_in_location(lat1 float, lon1 float, lat2 float, lon2 float, radius float)
    RETURNS BOOLEAN
AS
'
declare
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
    BEGIN
        IF lat1 = lat2 AND lon1 = lon2
            THEN RETURN TRUE;
        ELSE
            rad_lat1 = pi() * lat1 / 180;
            rad_lat2 = pi() * lat2 / 180;
            theta = lon1 - lon2;
            rad_theta = pi() * theta / 180;
            dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);
            IF dist > 1
                THEN dist = 1;
            END IF;
            dist = acos(dist);
            dist = dist * 180 / pi();
            dist = dist * 60 * 1.8524;
            RETURN (dist <= radius);
        END IF;
    END;
'
LANGUAGE PLPGSQL;